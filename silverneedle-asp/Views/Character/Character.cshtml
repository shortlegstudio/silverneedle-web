@using SilverNeedle.Characters;
@using SilverNeedle.Characters.Magic;
@using SilverNeedle.Characters.Background;
@using SilverNeedle.Utility;
@{
    var character = (CharacterSheetTextView)ViewData["Character"];
    var charFull = (CharacterSheet)ViewData["characterFull"];
    ViewData["Title"] = "NPC - " + character.Name;
    var domains = charFull.GetAll<SilverNeedle.Characters.Domains.Domain>();
}
<div class="charactersheet">
    <h1>
      <span>@character.Name</span>
      <a asp-area="" asp-controller="Character" asp-action="Character" asp-route-strategy="@ViewData["strategy"]" asp-route-level="@ViewData["level"]" asp-route-scores="@ViewData["scores"]" class="btn btn-lg btn-primary pull-right hidden-print" role="button">Regenerate</a>
    </h1>
    <h4>@character.Alignment @character.Gender @character.Race</h4> 
    <h5>@character.Class @character.Level
    <small>Favored: 
    @foreach(var f in charFull.GetAll<FavoredClass>())
    {
        @f.ClassName
        @:&nbsp;
    }
    </small>
    </h5>
    <div class="row">
        <div class="col-sm-8">
            <div class="row">
                <div class="col-sm-12 no-padding">
                    @{ Html.RenderPartial("_appearance", this.ViewData); }
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 no-padding">
                    @{ Html.RenderPartial("_history", this.ViewData); }
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 no-padding">
                    @{ Html.RenderPartial("_likes", this.ViewData); }
                </div>
            </div>
        </div>
        <div class="col-sm-4 no-padding">
            @{ Html.RenderPartial("_personality", this.ViewData); }
        </div>
    </div>
    <div class="row">
        <div class="col-sm-8">
            <div class="row">
                <div class="col-sm-4 no-padding no-margin">
                    @{ Html.RenderPartial("_ability-scores", this.ViewData); }
                </div>
                <div class="col-sm-8 no-padding">
                    @{ Html.RenderPartial("_basic-statistics", this.ViewData); }
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6 no-padding">
                    @{ Html.RenderPartial("_offense-statistics", this.ViewData); }
                </div>
                <div class="col-sm-6 no-padding">
                    @{ Html.RenderPartial("_defense-statistics", this.ViewData); }
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6 no-padding">
                    @{ Html.RenderPartial("_special-abilities", this.ViewData); }
                </div>
                <div class="col-sm-6 no-padding">
                    @{ Html.RenderPartial("_feats", this.ViewData); }
                </div>
            </div>
            <div class="row">
                @foreach(var sc in charFull.GetAll<ISpellCasting>())
                {
                    <div class="col-sm-12 no-padding">
                        @{ Html.RenderPartial("_spell-casting", 
                        new ViewDataDictionary(this.ViewData) {
                            { "spell-casting", sc }
                        }); }
                    </div>
                }
                @if(domains.Count() > 0)
                {
                    <div class="col-sm-12 no-padding">
                        @{ Html.RenderPartial("_domains", this.ViewData); }
                    </div>
                }
            </div>
            @{ Html.RenderPartial("_rage-powers", this.ViewData); }
        </div>
        <div class="col-sm-4">
            <div class="row">
                <div class="col-sm-12 no-padding">
                    @{ Html.RenderPartial("_skills", this.ViewData); }
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 no-padding">
                    @{ Html.RenderPartial("_inventory", this.ViewData); }
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 no-padding">
                    @{ Html.RenderPartial("_money", this.ViewData); }
                </div>
            </div>

        </div>
    </div>
</div>
<div>
    <pre>
        @ViewData["character-json"]
    </pre>
</div>

